{"vulnerabilities": {"callstack": [], "reentrancy": [], "assertion_failure": [], "time_dependency": ["temp/tmp11605:763:10: Warning: Timestamp Dependency.\n         require(channel.updateLCtimeout < now, \"LC timeout over.\")", "temp/tmp11605:422:10: Warning: Timestamp Dependency.\n         require(now > Channels[_lcID].LCopenTimeout)"], "integer_overflow": ["temp/tmp11605:433:68: Warning: Integer Overflow.\n         emit DidLCClose(_lcID, 0, Channels[_lcID].ethBalances[0], Channels[_lcID].erc20Balances", "temp/tmp11605:459:15: Warning: Integer Overflow.\n         emit DidLCJoin(_lcID, _balances[0], _balances[1])", "temp/tmp11605:780:14: Warning: Integer Overflow.\n             channel.erc20Balances[0]+=channel.erc20Balances[2]", "temp/tmp11605:415:10: Warning: Integer Overflow.\n         Channels[_lcID].initialDeposit", "temp/tmp11605:649:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].ethBalances[1]", "temp/tmp11605:477:18: Warning: Integer Overflow.\n                 Channels[_lcID].ethBalances[2] += msg.value", "temp/tmp11605:453:10: Warning: Integer Overflow.\n         Channels[_lcID].initialDeposit[0]+=_balances[0]", "temp/tmp11605:648:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].ethBalances", "temp/tmp11605:484:18: Warning: Integer Overflow.\n                 Channels[_lcID].erc20Balances", "temp/tmp11605:453:10: Warning: Integer Overflow.\n         Channels[_lcID].initialDeposit", "temp/tmp11605:484:18: Warning: Integer Overflow.\n                 Channels[_lcID].erc20Balances[3] += _balance", "temp/tmp11605:781:14: Warning: Integer Overflow.\n             channel.erc20Balances[1]", "temp/tmp11605:450:14: Warning: Integer Overflow.\n             Channels[_lcID].erc20Balances[1]", "temp/tmp11605:651:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].erc20Balances", "temp/tmp11605:647:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].sequence", "temp/tmp11605:795:10: Warning: Integer Overflow.\n         channel.erc20Balances", "temp/tmp11605:650:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].erc20Balances", "temp/tmp11605:793:10: Warning: Integer Overflow.\n         channel.ethBalances", "temp/tmp11605:645:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].partyA", "temp/tmp11605:650:52: Warning: Integer Overflow.\n         virtualChannels[_vcID].erc20Balances[0] = _balances[2]", "temp/tmp11605:454:10: Warning: Integer Overflow.\n         Channels[_lcID].initialDeposit[1]", "temp/tmp11605:781:14: Warning: Integer Overflow.\n             channel.erc20Balances[1]+=channel.erc20Balances[3]", "temp/tmp11605:795:10: Warning: Integer Overflow.\n         channel.erc20Balances[1]", "temp/tmp11605:2:69: Warning: Integer Overflow.\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/r", "temp/tmp11605:436:10: Warning: Integer Overflow.\n         delete Channels[_lcID]", "temp/tmp11605:794:10: Warning: Integer Overflow.\n         channel.erc20Balances", "temp/tmp11605:454:10: Warning: Integer Overflow.\n         Channels[_lcID].initialDeposit[1]+=_balances[1]", "temp/tmp11605:652:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].bond", "temp/tmp11605:477:18: Warning: Integer Overflow.\n                 Channels[_lcID].ethBalances[2]", "temp/tmp11605:793:10: Warning: Integer Overflow.\n         channel.ethBalances[1]", "temp/tmp11605:456:10: Warning: Integer Overflow.\n         Channels[_lcID].isOpen", "temp/tmp11605:378:6: Warning: Integer Overflow.\n     mapping(bytes32 => Channel) public Channels", "temp/tmp11605:804:18: Warning: Integer Overflow.\n                 channel.token", "temp/tmp11605:707:51: Warning: Integer Overflow.\n         require(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState, sigA)", "temp/tmp11605:788:32: Warning: Integer Overflow.\n         uint256 ethbalanceI = channel.ethBalances", "temp/tmp11605:649:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].ethBalances", "temp/tmp11605:531:10: Warning: Integer Overflow.\n         Channels[_lcID].isOpen", "temp/tmp11605:781:40: Warning: Integer Overflow.\n             channel.erc20Balances[1]+=channel.erc20Balances", "temp/tmp11605:788:32: Warning: Integer Overflow.\n         uint256 ethbalanceI = channel.ethBalances[1]", "temp/tmp11605:457:10: Warning: Integer Overflow.\n         numChannels++", "temp/tmp11605:450:14: Warning: Integer Overflow.\n             Channels[_lcID].erc20Balances", "temp/tmp11605:851:10: Warning: Integer Overflow.\n         Channel memory channel = Channels[id]", "temp/tmp11605:414:42: Warning: Integer Overflow.\n         Channels[_lcID].LCopenTimeout = now + _confirmTime", "temp/tmp11605:787:32: Warning: Integer Overflow.\n         uint256 ethbalanceA = channel.ethBalances", "temp/tmp11605:586:47: Warning: Integer Overflow.\n         require(channel.partyAddresses[1] == ECTools.recoverSigner(_state, _sigI)", "temp/tmp11605:790:34: Warning: Integer Overflow.\n         uint256 tokenbalanceI = channel.erc20Balances[1]", "temp/tmp11605:454:10: Warning: Integer Overflow.\n         Channels[_lcID].initialDeposit", "temp/tmp11605:484:18: Warning: Integer Overflow.\n                 Channels[_lcID].erc20Balances[3]", "temp/tmp11605:631:10: Warning: Integer Overflow.\n         require(Channels[_lcID].updateLCtimeout < now, \"LC timeout not over.\")", "temp/tmp11605:377:6: Warning: Integer Overflow.\n     mapping(bytes32 => VirtualChannel) public virtualChannels", "temp/tmp11605:410:10: Warning: Integer Overflow.\n         Channels[_lcID].sequence", "temp/tmp11605:407:14: Warning: Integer Overflow.\n             Channels[_lcID].erc20Balances", "temp/tmp11605:411:10: Warning: Integer Overflow.\n         Channels[_lcID].confirmTime", "temp/tmp11605:646:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].partyB", "temp/tmp11605:781:40: Warning: Integer Overflow.\n             channel.erc20Balances[1]+=channel.erc20Balances[3]", "temp/tmp11605:487:18: Warning: Integer Overflow.\n                 Channels[_lcID].ethBalances", "temp/tmp11605:781:14: Warning: Integer Overflow.\n             channel.erc20Balances", "temp/tmp11605:264:2: Warning: Integer Overflow.\n contract LedgerChannel {\n ^\nSpanning multiple lines.", "temp/tmp11605:651:52: Warning: Integer Overflow.\n         virtualChannels[_vcID].erc20Balances[1] = _balances[3]", "temp/tmp11605:790:34: Warning: Integer Overflow.\n         uint256 tokenbalanceI = channel.erc20Balances", "temp/tmp11605:780:14: Warning: Integer Overflow.\n             channel.erc20Balances", "temp/tmp11605:477:18: Warning: Integer Overflow.\n                 Channels[_lcID].ethBalances", "temp/tmp11605:433:36: Warning: Integer Overflow.\n         emit DidLCClose(_lcID, 0, Channels[_lcID].ethBalances", "temp/tmp11605:651:10: Warning: Integer Overflow.\n         virtualChannels[_vcID].erc20Balances[1]", "temp/tmp11605:487:18: Warning: Integer Overflow.\n                 Channels[_lcID].ethBalances[3]", "temp/tmp11605:789:34: Warning: Integer Overflow.\n         uint256 tokenbalanceA = channel.erc20Balances", "temp/tmp11605:649:50: Warning: Integer Overflow.\n         virtualChannels[_vcID].ethBalances[1] = _balances[1]", "temp/tmp11605:487:18: Warning: Integer Overflow.\n                 Channels[_lcID].ethBalances[3] += msg.value", "temp/tmp11605:417:15: Warning: Integer Overflow.\n         emit DidLCOpen(_lcID, msg.sender, _partyI, _balances[0], _token, _balances[1], Channels[_lcID].LCopenTimeout)", "temp/tmp11605:414:10: Warning: Integer Overflow.\n         Channels[_lcID].LCopenTimeout", "temp/tmp11605:780:40: Warning: Integer Overflow.\n             channel.erc20Balances[0]+=channel.erc20Balances[2]", "temp/tmp11605:780:40: Warning: Integer Overflow.\n             channel.erc20Balances[0]+=channel.erc20Balances", "temp/tmp11605:417:89: Warning: Integer Overflow.\n         emit DidLCOpen(_lcID, msg.sender, _partyI, _balances[0], _token, _balances[1], Channels[_lcID].LCopenTimeout", "temp/tmp11605:792:10: Warning: Integer Overflow.\n         channel.ethBalances"], "parity_multisig_bug_2": [], "integer_underflow": ["temp/tmp11605:829:27: Warning: Integer Underflow.\n                 cursor = keccak256(abi.encodePacked(proofElem, cursor))", "temp/tmp11605:629:10: Warning: Integer Underflow.\n         require(!virtualChannels[_vcID].isClose, \"VC is closed.\")", "temp/tmp11605:459:15: Warning: Integer Underflow.\n         emit DidLCJoin(_lcID, _balances[0], _balances[1])", "temp/tmp11605:569:27: Warning: Integer Underflow.\n         bytes32 _state = keccak256(\n         ^\nSpanning multiple lines.", "temp/tmp11605:401:14: Warning: Integer Underflow.\n             require(msg.value == _balances[0], \"Eth balance does not match sent value\")", "temp/tmp11605:7:57: Warning: Integer Underflow.\n // https://etherscan.io/address/0xf91546835f756da0c10cfa0cda95b15577b84aa7#code\n ^\nSpanning multiple lines.", "temp/tmp11605:627:10: Warning: Integer Underflow.\n         require(Channels[_lcID].isOpen, \"LC is closed.\")", "temp/tmp11605:827:27: Warning: Integer Underflow.\n                 cursor = keccak256(abi.encodePacked(cursor, proofElem))", "temp/tmp11605:673:10: Warning: Integer Underflow.\n         require(Channels[_lcID].isOpen, \"LC is closed.\")", "temp/tmp11605:528:55: Warning: Integer Underflow.\n         require(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state, _sigA)", "temp/tmp11605:2:24: Warning: Integer Underflow.\n * @source: https://github.com/trailofbits/n", "temp/tmp11605:449:14: Warning: Integer Underflow.\n             require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"joinChannel: token transfer failure\")", "temp/tmp11605:635:31: Warning: Integer Underflow.\n         bytes32 _initState = keccak256(\n         ^\nSpanning multiple lines.", "temp/tmp11605:691:33: Warning: Integer Underflow.\n         bytes32 _updateState = keccak256(\n         ^\nSpanning multiple lines.", "temp/tmp11605:640:29: Warning: Integer Underflow.\n         require(_partyA == ECTools.recoverSigner(_initState, sigA)", "temp/tmp11605:676:10: Warning: Integer Underflow.\n         require(virtualChannels[_vcID].sequence < updateSeq, \"VC sequence is higher than update sequence.\")", "temp/tmp11605:677:10: Warning: Integer Underflow.\n         require(\n         ^\nSpanning multiple lines.", "temp/tmp11605:586:47: Warning: Integer Underflow.\n         require(channel.partyAddresses[1] == ECTools.recoverSigner(_state, _sigI)", "temp/tmp11605:529:55: Warning: Integer Underflow.\n         require(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state, _sigI)", "temp/tmp11605:417:15: Warning: Integer Underflow.\n         emit DidLCOpen(_lcID, msg.sender, _partyI, _balances[0], _token, _balances[1], Channels[_lcID].LCopenTimeout)", "temp/tmp11605:512:27: Warning: Integer Underflow.\n         bytes32 _state = keccak256(\n         ^\nSpanning multiple lines.", "temp/tmp11605:585:47: Warning: Integer Underflow.\n         require(channel.partyAddresses[0] == ECTools.recoverSigner(_state, _sigA)", "temp/tmp11605:445:14: Warning: Integer Underflow.\n             require(msg.value == _balances[0], \"state balance does not match sent value\")", "temp/tmp11605:675:10: Warning: Integer Underflow.\n         require(!virtualChannels[_vcID].isClose, \"VC is closed.\")", "temp/tmp11605:631:10: Warning: Integer Underflow.\n         require(Channels[_lcID].updateLCtimeout < now, \"LC timeout not over.\")", "temp/tmp11605:707:51: Warning: Integer Underflow.\n         require(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState, sigA)", "temp/tmp11605:406:14: Warning: Integer Underflow.\n             require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"CreateChannel: token transfer failure\")", "temp/tmp11605:681:10: Warning: Integer Underflow.\n         require(\n         ^\nSpanning multiple lines."], "money_concurrency": [["temp/tmp11605:798:14: Warning: Transaction-Ordering Dependency.\n             channel.partyAddresses[0].transfer(ethbalanceA)"], ["temp/tmp11605:799:14: Warning: Transaction-Ordering Dependency.\n             channel.partyAddresses[1].transfer(ethbalanceI)", "temp/tmp11605:798:14: Warning: Transaction-Ordering Dependency.\n             channel.partyAddresses[0].transfer(ethbalanceA)"]]}, "file_path": "dataset/reentrancy/spank_chain_payment.sol", "evm_code_coverage": 0.6833805095026284, "time": 52.477391958236694}